{
  "tech_stack": [
    "Node.js",
    "Express",
    "MongoDB",
    "Mongoose",
    "Socket.IO",
    "JWT",
    "Helmet",
    "CORS",
    "express-mongo-sanitize"
  ],
  "features": [
    {
      "name": "Authentication",
      "description": "User registration, login, token verification, and profile update.",
      "files": [
        "backend/routes/auth.js",
        "backend/middleware/validation.js",
        "backend/middleware/rateLimiter.js",
        "backend/middleware/authMiddleware.js",
        "backend/models/User.js"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": { "title": "Auth API", "version": "1.0.0" },
        "paths": {
          "/api/auth/register": {
            "post": {
              "summary": "Register a new user",
              "requestBody": { "required": true },
              "responses": { "201": { "description": "Created" }, "400": { "description": "Bad Request" } }
            }
          },
          "/api/auth/login": {
            "post": {
              "summary": "Login and get JWT",
              "requestBody": { "required": true },
              "responses": { "200": { "description": "OK" }, "401": { "description": "Unauthorized" } }
            }
          },
          "/api/auth/verify": {
            "get": {
              "summary": "Verify JWT",
              "responses": { "200": { "description": "OK" }, "401": { "description": "Unauthorized" } }
            }
          },
          "/api/auth/profile": {
            "put": {
              "summary": "Update profile fields",
              "responses": { "200": { "description": "OK" }, "400": { "description": "Bad Request" }, "404": { "description": "Not Found" } },
              "security": [{ "bearerAuth": [] }]
            }
          }
        },
        "components": { "securitySchemes": { "bearerAuth": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" } } }
      }
    },
    {
      "name": "Matching",
      "description": "AI-driven study buddy matching and connect action.",
      "files": [
        "backend/routes/match.js",
        "backend/models/User.js",
        "backend/utils/updateXP.js"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": { "title": "Match API", "version": "1.0.0" },
        "paths": {
          "/api/match": {
            "get": { "summary": "Get top matches", "responses": { "200": { "description": "OK" } }, "security": [{ "bearerAuth": [] }] }
          },
          "/api/match/connect": {
            "post": { "summary": "Connect with a buddy", "responses": { "200": { "description": "OK" }, "400": { "description": "Bad Request" }, "404": { "description": "Not Found" } }, "security": [{ "bearerAuth": [] }] }
          }
        },
        "components": { "securitySchemes": { "bearerAuth": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" } } }
      }
    },
    {
      "name": "Events",
      "description": "List, create and join events; XP rewards on join.",
      "files": [
        "backend/routes/events.js",
        "backend/models/Event.js",
        "backend/utils/updateXP.js"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": { "title": "Events API", "version": "1.0.0" },
        "paths": {
          "/api/events": {
            "get": { "summary": "Recommended events", "responses": { "200": { "description": "OK" } }, "security": [{ "bearerAuth": [] }] },
            "post": { "summary": "Create event", "responses": { "201": { "description": "Created" } }, "security": [{ "bearerAuth": [] }] }
          },
          "/api/events/join": {
            "post": { "summary": "Join an event", "responses": { "200": { "description": "OK" }, "404": { "description": "Not Found" } }, "security": [{ "bearerAuth": [] }] }
          }
        },
        "components": { "securitySchemes": { "bearerAuth": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" } } }
      }
    },
    {
      "name": "Connections",
      "description": "Send/respond to connection requests and notifications.",
      "files": [
        "backend/routes/connections.js",
        "backend/models/ConnectionRequest.js",
        "backend/models/Conversation.js",
        "backend/socket.js"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": { "title": "Connections API", "version": "1.0.0" },
        "paths": {
          "/api/connections/request": {
            "post": { "summary": "Send connection request", "responses": { "200": { "description": "OK" } }, "security": [{ "bearerAuth": [] }] }
          },
          "/api/connections/requests": {
            "get": { "summary": "List requests", "responses": { "200": { "description": "OK" } }, "security": [{ "bearerAuth": [] }] }
          },
          "/api/connections/respond": {
            "post": { "summary": "Accept/Reject request", "responses": { "200": { "description": "OK" }, "404": { "description": "Not Found" } }, "security": [{ "bearerAuth": [] }] }
          }
        },
        "components": { "securitySchemes": { "bearerAuth": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" } } }
      }
    },
    {
      "name": "Conversations",
      "description": "List conversations, fetch messages, send messages (with Socket.IO notifications).",
      "files": [
        "backend/routes/conversations.js",
        "backend/models/Conversation.js",
        "backend/models/Message.js",
        "backend/socket.js"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": { "title": "Conversations API", "version": "1.0.0" },
        "paths": {
          "/api/conversations": {
            "get": { "summary": "List my conversations", "responses": { "200": { "description": "OK" } }, "security": [{ "bearerAuth": [] }] }
          },
          "/api/conversations/{id}/messages": {
            "get": { "summary": "Paginated messages", "responses": { "200": { "description": "OK" } }, "security": [{ "bearerAuth": [] }], "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }] },
            "post": { "summary": "Send a message", "responses": { "200": { "description": "OK" } }, "security": [{ "bearerAuth": [] }], "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }] }
          }
        },
        "components": { "securitySchemes": { "bearerAuth": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" } } }
      }
    },
    {
      "name": "Profile Preview",
      "description": "Preview a user's profile tied to a pending connection request.",
      "files": [
        "backend/routes/profile.js",
        "backend/models/ConnectionRequest.js",
        "backend/models/User.js"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": { "title": "Profile API", "version": "1.0.0" },
        "paths": {
          "/api/profile/preview/{userId}": {
            "get": { "summary": "Preview limited profile", "responses": { "200": { "description": "OK" }, "403": { "description": "Forbidden" }, "404": { "description": "Not Found" } }, "security": [{ "bearerAuth": [] }], "parameters": [{ "name": "userId", "in": "path", "required": true, "schema": { "type": "string" } }] }
          },
          "/api/profile/preview": {
            "get": { "summary": "Preview via query param", "responses": { "200": { "description": "OK" } }, "security": [{ "bearerAuth": [] }] }
          }
        },
        "components": { "securitySchemes": { "bearerAuth": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" } } }
      }
    },
    {
      "name": "AI Tips",
      "description": "Generate short motivational or wellness tips using Hugging Face API with daily caching.",
      "files": [
        "backend/routes/tips.js"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": { "title": "AI Tips API", "version": "1.0.0" },
        "paths": {
          "/api/tips": {
            "post": { "summary": "Generate personalized tips", "responses": { "200": { "description": "OK" }, "400": { "description": "Bad Request" } }, "security": [{ "bearerAuth": [] }] }
          }
        },
        "components": { "securitySchemes": { "bearerAuth": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" } } }
      }
    },
    {
      "name": "Wellness",
      "description": "Get a mood-based wellness tip and perform daily check-in for XP.",
      "files": [
        "backend/routes/wellness.js",
        "backend/utils/updateXP.js"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": { "title": "Wellness API", "version": "1.0.0" },
        "paths": {
          "/api/wellness": {
            "get": { "summary": "Get a wellness tip", "parameters": [{ "name": "mood", "in": "query", "schema": { "type": "string" } }], "responses": { "200": { "description": "OK" } }, "security": [{ "bearerAuth": [] }] }
          },
          "/api/wellness/checkin": {
            "post": { "summary": "Daily check-in adds XP", "responses": { "200": { "description": "OK" }, "400": { "description": "Already checked in" } }, "security": [{ "bearerAuth": [] }] }
          }
        },
        "components": { "securitySchemes": { "bearerAuth": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" } } }
      }
    },
    {
      "name": "XP",
      "description": "Get current XP and add XP for actions.",
      "files": [
        "backend/routes/xp.js",
        "backend/utils/updateXP.js"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": { "title": "XP API", "version": "1.0.0" },
        "paths": {
          "/api/xp": {
            "get": { "summary": "Get my XP", "responses": { "200": { "description": "OK" } }, "security": [{ "bearerAuth": [] }] }
          },
          "/api/xp/add": {
            "post": { "summary": "Add XP to current user", "responses": { "200": { "description": "OK" }, "400": { "description": "Bad Request" } }, "security": [{ "bearerAuth": [] }] }
          }
        },
        "components": { "securitySchemes": { "bearerAuth": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" } } }
      }
    }
  ]
}

{
  "tech_stack": [
    "JavaScript",
    "React (Create React App)",
    "TailwindCSS",
    "React Router",
    "Axios",
    "Socket.IO Client"
  ],
  "features": [
    {
      "name": "App shell and routing",
      "description": "Root React app with router and global styles entry points.",
      "files": [
        "frontend/src/App.js",
        "frontend/src/index.js",
        "frontend/src/index.css"
      ]
    },
    {
      "name": "API service (Axios)",
      "description": "Centralized Axios instance and API base configuration.",
      "files": [
        "frontend/src/api/axios.js"
      ]
    },
    {
      "name": "Socket service",
      "description": "Socket.IO client initialization and exports.",
      "files": [
        "frontend/src/socket.js"
      ]
    },
    {
      "name": "Authentication pages",
      "description": "Login and registration UI and logic.",
      "files": [
        "frontend/src/components/auth/Login.js",
        "frontend/src/components/auth/Register.js"
      ]
    },
    {
      "name": "Navigation and layout",
      "description": "Top navigation bar and common layout elements.",
      "files": [
        "frontend/src/components/Navbar.js",
        "frontend/src/components/ToastContainer.jsx"
      ]
    },
    {
      "name": "Core pages",
      "description": "Main feature pages exposed in the app.",
      "files": [
        "frontend/src/components/Dashboard.js",
        "frontend/src/components/Events.js",
        "frontend/src/components/StudyBuddy.js",
        "frontend/src/components/Wellness.js",
        "frontend/src/components/Profile.js",
        "frontend/src/components/Landing.js"
      ]
    },
    {
      "name": "Chat pages",
      "description": "Chat list and chat detail pages using sockets.",
      "files": [
        "frontend/src/pages/Chats.jsx",
        "frontend/src/pages/Chat.jsx"
      ]
    },
    {
      "name": "Profile modals",
      "description": "Profile preview and About Me modal components.",
      "files": [
        "frontend/src/components/ProfilePreviewModal.jsx",
        "frontend/src/components/AboutMeModal.jsx"
      ]
    },
    {
      "name": "Requests and notifications",
      "description": "Friend/study requests dropdown and notifications bell.",
      "files": [
        "frontend/src/components/RequestsDropdown.jsx",
        "frontend/src/components/NotificationsBell.jsx"
      ]
    },
    {
      "name": "Connect and logout controls",
      "description": "Wallet/connect button and logout confirmation dialog.",
      "files": [
        "frontend/src/components/ConnectButton.jsx",
        "frontend/src/components/LogoutConfirmDialog.js"
      ]
    },
    {
      "name": "UI helpers",
      "description": "Reusable UI fragments and utilities.",
      "files": [
        "frontend/src/components/TipsSection.jsx",
        "frontend/src/utils/toast.js"
      ]
    }
  ]
}
{
  "tech_stack": [
    "JavaScript",
    "Node.js",
    "Express",
    "MongoDB",
    "Mongoose",
    "JWT",
    "bcryptjs",
    "CORS"
  ],
  "features": [
    {
      "name": "User Registration API",
      "description": "Register a new user with name, email, password, skills, and interests. Returns JWT token and user details.",
      "files": [
        "backend/routes/auth.js",
        "backend/models/User.js",
        "backend/middleware/authMiddleware.js"
      ],
      "api_doc": {
        "paths": {
          "/api/auth/register": {
            "post": {
              "summary": "Register a new user",
              "tags": ["Authentication"],
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": ["name", "email", "password"],
                      "properties": {
                        "name": { "type": "string" },
                        "email": { "type": "string", "format": "email" },
                        "password": { "type": "string", "minLength": 6 },
                        "skills": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "interests": {
                          "type": "array",
                          "items": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "201": { "description": "User registered successfully" },
                "400": { "description": "User already exists" },
                "500": { "description": "Server error" }
              }
            }
          }
        }
      }
    },
    {
      "name": "User Login API",
      "description": "Authenticate user with email and password. Returns JWT token and user details.",
      "files": ["backend/routes/auth.js", "backend/models/User.js"],
      "api_doc": {
        "paths": {
          "/api/auth/login": {
            "post": {
              "summary": "Login user",
              "tags": ["Authentication"],
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": ["email", "password"],
                      "properties": {
                        "email": { "type": "string", "format": "email" },
                        "password": { "type": "string" }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": { "description": "Login successful" },
                "401": { "description": "Invalid credentials" },
                "500": { "description": "Server error" }
              }
            }
          }
        }
      }
    },
    {
      "name": "Get Recommended Events API",
      "description": "Get event recommendations based on user interests. Requires authentication.",
      "files": [
        "backend/routes/events.js",
        "backend/models/Event.js",
        "backend/middleware/authMiddleware.js"
      ],
      "api_doc": {
        "paths": {
          "/api/events": {
            "get": {
              "summary": "Get recommended events",
              "tags": ["Events"],
              "security": [{ "BearerAuth": [] }],
              "responses": {
                "200": { "description": "List of recommended events" },
                "401": { "description": "Unauthorized" },
                "500": { "description": "Server error" }
              }
            }
          }
        }
      }
    },
    {
      "name": "Create Event API",
      "description": "Create a new event with title, date, time, location, tags, and description. Requires authentication.",
      "files": [
        "backend/routes/events.js",
        "backend/models/Event.js",
        "backend/middleware/authMiddleware.js"
      ],
      "api_doc": {
        "paths": {
          "/api/events": {
            "post": {
              "summary": "Create a new event",
              "tags": ["Events"],
              "security": [{ "BearerAuth": [] }],
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": ["title", "date", "time", "location", "tags"],
                      "properties": {
                        "title": { "type": "string" },
                        "date": { "type": "string" },
                        "time": { "type": "string" },
                        "location": { "type": "string" },
                        "tags": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "description": { "type": "string" }
                      }
                    }
                  }
                }
              },
              "responses": {
                "201": { "description": "Event created successfully" },
                "401": { "description": "Unauthorized" },
                "500": { "description": "Server error" }
              }
            }
          }
        }
      }
    },
    {
      "name": "Get Wellness Tip API",
      "description": "Get a wellness tip based on user's mood. Requires authentication.",
      "files": [
        "backend/routes/wellness.js",
        "backend/middleware/authMiddleware.js"
      ],
      "api_doc": {
        "paths": {
          "/api/wellness": {
            "get": {
              "summary": "Get wellness tip",
              "tags": ["Wellness"],
              "security": [{ "BearerAuth": [] }],
              "parameters": [
                {
                  "name": "mood",
                  "in": "query",
                  "description": "User's current mood",
                  "schema": {
                    "type": "string",
                    "enum": ["Happy", "Neutral", "Stressed"]
                  }
                }
              ],
              "responses": {
                "200": { "description": "Wellness tip returned" },
                "401": { "description": "Unauthorized" },
                "500": { "description": "Server error" }
              }
            }
          }
        }
      }
    },
    {
      "name": "Wellness Check-in API",
      "description": "Record user check-in with mood and tip, adds points. Requires authentication.",
      "files": [
        "backend/routes/wellness.js",
        "backend/models/User.js",
        "backend/middleware/authMiddleware.js"
      ],
      "api_doc": {
        "paths": {
          "/api/wellness/checkin": {
            "post": {
              "summary": "Record wellness check-in",
              "tags": ["Wellness"],
              "security": [{ "BearerAuth": [] }],
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": ["mood", "tip"],
                      "properties": {
                        "mood": { "type": "string" },
                        "tip": { "type": "string" }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": { "description": "Check-in successful" },
                "401": { "description": "Unauthorized" },
                "500": { "description": "Server error" }
              }
            }
          }
        }
      }
    },
    {
      "name": "Get Study Buddy Matches API",
      "description": "Get top 3 study buddy matches based on shared skills and interests. Requires authentication.",
      "files": [
        "backend/routes/match.js",
        "backend/models/User.js",
        "backend/middleware/authMiddleware.js"
      ],
      "api_doc": {
        "paths": {
          "/api/match": {
            "get": {
              "summary": "Get study buddy matches",
              "tags": ["Matching"],
              "security": [{ "BearerAuth": [] }],
              "responses": {
                "200": { "description": "List of top matches" },
                "401": { "description": "Unauthorized" },
                "500": { "description": "Server error" }
              }
            }
          }
        }
      }
    }
  ]
}
